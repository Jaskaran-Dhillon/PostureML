[{"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\index.js":"1","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\App.js":"2","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Store.js":"3","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Webcam_app.js":"4","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Navbar.js":"5","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Information.js":"6","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\LineChart.js":"7"},{"size":232,"mtime":1657505485611,"results":"8","hashOfConfig":"9"},{"size":802,"mtime":1657505485608,"results":"10","hashOfConfig":"9"},{"size":1137,"mtime":1657505485610,"results":"11","hashOfConfig":"9"},{"size":4883,"mtime":1657508919359,"results":"12","hashOfConfig":"9"},{"size":689,"mtime":1657505485610,"results":"13","hashOfConfig":"9"},{"size":807,"mtime":1657505485609,"results":"14","hashOfConfig":"9"},{"size":1182,"mtime":1657917544605,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1id2sti",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\index.js",[],["32","33"],"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\App.js",[],"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Store.js",[],"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Webcam_app.js",["34"],"import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport Webcam from 'react-webcam'\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Context } from \"./Store\";\r\nimport './Webcam_app.css';\r\n\r\nvar apiUrl = process.env.REACT_APP_API_URL;\r\nvar apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst videoConstraints = {\r\n  width: 720,\r\n  height: 480,\r\n  aspectRatio: 1\r\n};\r\n\r\nfunction dataURLtoFile(dataurl, filename) { //Necessary to convert base64 encoded string image to proper image file for Microsoft Azure\r\n  var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n  while (n--) {\r\n    u8arr[n] = bstr.charCodeAt(n);\r\n  }\r\n  return new File([u8arr], filename, { type: mime });\r\n}\r\n\r\nasync function postData(url = '', data = {}) {\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin',\r\n    headers: {\r\n      'Content-Type': 'application/octet-stream',\r\n      \"Prediction-Key\": apiKey,\r\n      'Access-Control-Allow-Origin':'*'\r\n    },\r\n    redirect: 'follow',\r\n    referrerPolicy: 'no-referrer',\r\n    body: data\r\n  });\r\n  return response.json();\r\n}\r\n\r\nfunction Webcam_app() {\r\n  const [dispatch] = useContext(Context);\r\n  const webcamRef = useRef(null);\r\n  const imgRef = useRef(null);\r\n  const [imgSrc, setImgSrc] = useState(null); //Holds the image that will be analyzed by Azure\r\n  const [timerRef, setTimerRef] = useState(null); //Holds the 7 seconds main timer\r\n  const [posture, setPosture] = useState({ //Tracks if current session is active, the posture state, posture issue, and the # of hits for the linechart\r\n    Session: \"stop\",\r\n    PostureState: \"good\",\r\n    Err_msg: \"Neck Tilt\"\r\n  })\r\n\r\n  const audioWarning = () => {\r\n    var msg = new SpeechSynthesisUtterance(); //Text to speech warning\r\n    msg.text = \"Please fix your posture\";\r\n    window.speechSynthesis.speak(msg);\r\n  };\r\n\r\n  const capture = React.useCallback(() => {\r\n    if (webcamRef.current) {\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      setImgSrc(imageSrc);\r\n    }\r\n  }, [webcamRef, setImgSrc]);\r\n\r\n  function changeSession() {\r\n    setPosture(prevPosture => {\r\n      if (timerRef === null) { //If starting...\r\n        let timer = setInterval(function () {\r\n\r\n          capture();\r\n        }, 7000);\r\n        setTimerRef(timer) //Set the state to a time interval which runs every 7 seconds\r\n      }\r\n      else {\r\n        clearInterval(timerRef); //If stopping session then clear interval and set state to null\r\n        setTimerRef(null); //This effectively removes the timer\r\n      }\r\n      return {\r\n        ...prevPosture,\r\n        Session: (posture.Session === \"Start\") ? \"Stop\" : \"Start\"\r\n      };\r\n    });\r\n  }\r\n\r\n  useEffect(() => { //Whenever the timer hits 7 seconds, a new image will be taken and the following analysis is done\r\n    if (imgRef.current) {\r\n      var fileData = dataURLtoFile(imgSrc, \"imageName.jpg\");\r\n\r\n      postData(apiUrl, fileData)\r\n        .then(data => {\r\n          if (posture.PostureState === \"good\" && data.predictions[0].tagName !== \"Good Posture\") {\r\n            dispatch({ type: data.predictions[0].tagName, data: null })\r\n\r\n            setPosture(prevPosture => {\r\n              return {\r\n                ...prevPosture,\r\n                PostureState: \"bad\",\r\n                Err_msg: data.predictions[0].tagName\r\n              };\r\n            });\r\n\r\n            audioWarning();\r\n\r\n            setTimeout(() => {\r\n              capture()\r\n            }, 2000); //Here we begin a faster timer to allow the user to fix their posture and remove their warning\r\n          }\r\n          else if (posture.PostureState === \"bad\" && data.predictions[0].tagName === \"Good Posture\") {\r\n            setPosture(prevPosture => {\r\n              return {\r\n                ...prevPosture,\r\n                PostureState: \"good\"\r\n              };\r\n            });\r\n          }\r\n\r\n        });\r\n    }\r\n  }, [imgSrc])\r\n\r\n  return (\r\n    <div >\r\n      <Grow in={posture.PostureState === \"bad\"} >\r\n        <Alert variant=\"filled\"\r\n          severity=\"error\"\r\n          className=\"alert\">\r\n          {\"Warning! Following bad posture detected: \" + posture.Err_msg + \". Please fix immediately\"}\r\n        </Alert>\r\n      </Grow>\r\n      <Webcam videoConstraints={videoConstraints}\r\n        audio={false}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\" />\r\n      <div />\r\n      <Button variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={changeSession}>\r\n        {(posture.Session === \"Start\") ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n      {imgSrc && <img id=\"image\" className=\"invis\" ref={imgRef} src={imgSrc} alt=\"\" />}\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Webcam_app;","C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Navbar.js",[],"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\Information.js",[],"C:\\Users\\jasdh\\Desktop\\PostureML\\src\\components\\LineChart.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":124,"column":6,"nodeType":"41","endLine":124,"endColumn":14,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'capture', 'dispatch', and 'posture.PostureState'. Either include them or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [capture, dispatch, imgSrc, posture.PostureState]",{"range":"48","text":"49"},[4102,4110],"[capture, dispatch, imgSrc, posture.PostureState]"]